/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.sql.ActorRepository;
import hr.algebra.dal.sql.DirectorRepository;
import hr.algebra.model.ActorDirector;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonAddable;
import hr.algebra.model.PersonEditable;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Manuel
 */
public class EditPersonsPanel extends javax.swing.JPanel implements PersonAddable, PersonEditable {
    
    private Repository movieRepository;
    private Repository personRepository;
    private Repository actorRepository;
    private Repository directorRepository;
    
    private MovieTableModel tableModel;
    private Movie selectedMovie;
    
    private final Set<Person> persons = new TreeSet<>();
    private final List<Person> actors = new ArrayList<>();
    private final List<Person> directors = new ArrayList<>();

    private final DefaultListModel<Person> personsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();

    /**
     * Creates new form EditPersonsPanel
     */
    public EditPersonsPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsPersons = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAddPerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnSaveChanges = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsTrash = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnXML = new javax.swing.JButton();

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovies);

        jScrollPane1.setViewportView(lsDirectors);

        jScrollPane3.setViewportView(lsActors);

        jScrollPane4.setViewportView(lsPersons);

        jLabel1.setText("Actors");

        jLabel2.setText("Directors");

        jLabel3.setText("Persons");

        btnAddPerson.setText("Add person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setText("Update person");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setText("Delete person");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnSaveChanges.setText("Save changes");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(lsTrash);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("=== Trash ===");

        btnXML.setText("Get XML");
        btnXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXMLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddPerson, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                    .addComponent(btnUpdatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                    .addComponent(btnDeletePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                    .addComponent(btnSaveChanges, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5)
                                    .addComponent(btnXML, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXML, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        new AddPersonDialog(this,(JFrame)this.getRootPane().getParent(), true).setVisible(true);       
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        Person person = lsPersons.getSelectedValue();
        if(person == null)
        {
            MessageUtils.showErrorMessage("Error", "Please choose a person!");
            return;
        }
        new EditPersonDialog(this, person, (JFrame)this.getRootPane().getParent(), true).setVisible(true); 
    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        Person person = lsPersons.getSelectedValue();
        if(person == null) {
            MessageUtils.showErrorMessage("Error", "Please choose a person!");
            return;
        }
        if(MessageUtils.showConfirmDialog("Delete", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                if(selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                persons.remove(person);
                personRepository.delete(person.getId());
                loadPersonsModel();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Can't delete person connected to movie!");
            }
        }
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        saveChanges();
    }//GEN-LAST:event_btnSaveChangesActionPerformed

    private static final String ARCHIVEXML = "movies.xml";
    
    private void btnXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXMLActionPerformed
        try {
            JAXBUtils.save(new MovieArchive(movieRepository.select()), ARCHIVEXML);
        } catch (JAXBException ex) {
            Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnXMLActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JButton btnXML;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<Person> lsPersons;
    private javax.swing.JList<Person> lsTrash;
    private javax.swing.JTable tbMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initTable();
            persons.clear();
            persons.addAll(personRepository.select());
            loadPersonsModel();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load form");
            System.exit(1);
        }
    }

    private void initRepository() throws Exception {
        movieRepository = RepositoryFactory.getMovieRepository();
        personRepository = RepositoryFactory.getPersonRepository();
        actorRepository = RepositoryFactory.getActorRepository();
        directorRepository = RepositoryFactory.getDirectorRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        new Thread(() -> {
            try {
                tableModel = new MovieTableModel(movieRepository.select());
            } catch (Exception ex) {
                Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            tbMovies.setModel(tableModel);
        }).start();
    }

    private void showMovie() {
        
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int id = (int)tableModel.getValueAt(rowIndex, 0);
        
        try {
            Optional<Movie> optMovie = movieRepository.select(id);
            if(optMovie.isPresent()){
                selectedMovie = optMovie.get();
                FillForm();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                                             

    private void FillForm() throws Exception {
        actors.clear();
        directors.clear();
        directors.addAll(DirectorRepository.selectByMovie(selectedMovie.getId()));
        actors.addAll(ActorRepository.selectByMovie(selectedMovie.getId()));
        loadActorsModel();
        loadDirectorsModel();
    }

    private void loadPersonsModel() {
        loadModel(personsModel, persons, lsPersons);
    }
    
    private void loadActorsModel() {
        loadModel(actorsModel, actors, lsActors);
    }
    
    private void loadDirectorsModel() {
        loadModel(directorsModel, directors, lsDirectors);
    }

    private void loadModel(DefaultListModel<Person> model, Collection<Person> list, JList uiList) {
        model.clear();
        list.forEach(model::addElement);
        uiList.setModel(model);
    }

    private void initDragNDrop() {
        lsPersons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsPersons.setDragEnabled(true);
        lsPersons.setTransferHandler(new ExportHandler());

        lsActors.setDropMode(DropMode.ON);
        lsActors.setDragEnabled(true);
        lsActors.setTransferHandler(new ActorsHandler());
        
        lsDirectors.setDropMode(DropMode.ON);
        lsDirectors.setDragEnabled(true);
        lsDirectors.setTransferHandler(new DirectorsHandler());
        
        lsTrash.setDropMode(DropMode.ON);
        lsTrash.setTransferHandler(new TrashImportHandler());
        
    }

    @Override
    public boolean addPerson(Person person) {
       if (persons.add(person)) {
            try {
                personRepository.create(person);
            } catch (Exception ex) {
                Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            loadPersonsModel();
            return true;
        }
        return false;
    }

    @Override
    public boolean editPerson(Person oldPerson, Person newPerson) {
        if (persons.remove(oldPerson)) {
            try {
                persons.add(newPerson);
                personRepository.update(oldPerson.getId(), newPerson);
            } catch (Exception ex) {
                Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            loadPersonsModel();
            return true;
        }
        return false;
    }

    private void saveChanges() {
        
        selectedMovie.setActors(actors);
        selectedMovie.setDirectors(directors);
        
        try {
            ActorRepository.deleteByMovie(selectedMovie.getId());
            DirectorRepository.deleteByMovie(selectedMovie.getId());
        } catch (Exception ex) {
            Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        if(selectedMovie.getDirectors() != null){
            selectedMovie.getDirectors().forEach(d -> {
                try {
                    int personId = personRepository.create(d);
                    int movieID = selectedMovie.getId();
                    directorRepository.create(new ActorDirector(personId, movieID));
                } catch (Exception ex) {
                    Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        }
        
        if(selectedMovie.getActors() != null){
            selectedMovie.getActors().forEach(d -> {
                try {
                    int personId = personRepository.create(d);
                    int movieID = selectedMovie.getId();
                    actorRepository.create(new ActorDirector(personId, movieID));
                } catch (Exception ex) {
                    Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        }
    }

    private class TrashImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (directors.remove(data)) {
                    loadDirectorsModel();
                    return true;
                }
                else if (actors.remove(data)) {
                    loadActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
    
    private class ExportHandler extends TransferHandler {
        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsPersons.getSelectedValue());
        }

    }

    private class ActorsHandler extends TransferHandler{

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (actors.add(data)) {
                    loadActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
       
        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsActors.getSelectedValue());
        }
        
    }
    
    private class DirectorsHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (directors.add(data)) {
                    loadDirectorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsDirectors.getSelectedValue());
        }
    }
}
